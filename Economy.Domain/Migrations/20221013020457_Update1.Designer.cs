// <auto-generated />
using System;
using Economy.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Economy.Domain.Migrations
{
    [DbContext(typeof(EconomyContext))]
    [Migration("20221013020457_Update1")]
    partial class Update1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Economy.Domain.Entities.Annuity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("End")
                        .HasColumnType("int")
                        .HasColumnName("end");

                    b.Property<string>("FlowType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("flowType");

                    b.Property<decimal?>("Future")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("future");

                    b.Property<int>("Initial")
                        .HasColumnType("int")
                        .HasColumnName("initial");

                    b.Property<decimal?>("Payment")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("payment");

                    b.Property<decimal?>("Present")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("present");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("projectId");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("rate");

                    b.Property<int>("TotalPeriod")
                        .HasColumnType("int")
                        .HasColumnName("totalPeriod");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Annuity");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("End")
                        .HasColumnType("int")
                        .HasColumnName("end");

                    b.Property<string>("FlowType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("flowType");

                    b.Property<decimal?>("Future")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("future");

                    b.Property<int>("Initial")
                        .HasColumnType("int")
                        .HasColumnName("initial");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("payment");

                    b.Property<decimal?>("Present")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("present");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("projectId");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("rate");

                    b.Property<int>("TotalPeriod")
                        .HasColumnType("int")
                        .HasColumnName("totalPeriod");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Interest");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Creation")
                        .HasColumnType("date")
                        .HasColumnName("creation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DownPayment")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("downPayment");

                    b.Property<int>("End")
                        .HasColumnType("int")
                        .HasColumnName("end");

                    b.Property<decimal?>("FinalPayment")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("finalPayment");

                    b.Property<string>("FlowType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("flowType");

                    b.Property<decimal?>("Future")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("future");

                    b.Property<bool>("Incremental")
                        .HasColumnType("bit")
                        .HasColumnName("incremental");

                    b.Property<int>("Initial")
                        .HasColumnType("int")
                        .HasColumnName("initial");

                    b.Property<decimal?>("Present")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("present");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("projectId");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("rate");

                    b.Property<int>("TotalPeriod")
                        .HasColumnType("int")
                        .HasColumnName("totalPeriod");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Serie");
                });

            modelBuilder.Entity("Economy.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Annuity", b =>
                {
                    b.HasOne("Economy.Domain.Entities.Project", "Project")
                        .WithMany("Annuities")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_projects")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Interest", b =>
                {
                    b.HasOne("Economy.Domain.Entities.Project", "Project")
                        .WithMany("Interests")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_projectss")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Project", b =>
                {
                    b.HasOne("Economy.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Serie", b =>
                {
                    b.HasOne("Economy.Domain.Entities.Project", "Project")
                        .WithMany("Series")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Economy.Domain.Entities.Project", b =>
                {
                    b.Navigation("Annuities");

                    b.Navigation("Interests");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Economy.Domain.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
